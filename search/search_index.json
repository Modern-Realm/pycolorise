{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Documentation","text":"<ul> <li>Add colors/fonts to the terminal</li> <li>The terminal colorizer is a tool that improves the visual experience of terminal applications</li> </ul> <p>Join Official Discord Server for more guidance !</p>"},{"location":"#features","title":"Features","text":"<ul> <li> <p>It provides templates for foreground, background colors and font styles for re-usability.</p> </li> <li> <p>It supports 24-bit true colors, RGB, and hex colors, providing a wide range of color options.</p> </li> <li> <p>The colorizer is built using object-oriented programming principles, making it highly customizable.</p> </li> <li> <p>Developers can easily create their own color schemes to suit their needs.</p> </li> <li> <p>The colorizer has no dependencies, making it easy to integrate into any project without adding unnecessary overhead.</p> </li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Create a file with '.py ' extension, Like: main.py</p> <pre><code># For foreground colors\nfrom pycolorise.colors import *\n# For background colors\nfrom pycolorise.bgColors import *\n# For font styles like: bold, italic, etc\nfrom pycolorise.styles import *\nprint(Purple(\"\u2022 Foreground colors:\"))\nprint(\nRed(\"red\"), BrightRed(\"bred\"),\nGreen(\"green\"), BrightGreen(\"bgreen\")\n)\nprint(Purple(\"\\n\u2022 Background colors:\"))\nprint(\nBgRed(\"red\"), BgBrightRed(\"bred\"),\nBgGreen(\"green\"), BgBrightGreen(\"bgreen\")\n)\nprint(Purple(\"\\n\u2022 Fonts:\"))\nprint(\nBold(\"bold\"), Underline(\"underline\"),\nStrikeThrough(\"strike through\"),\nItalic(\"italic\"), Framed(\"framed\")\n)\n</code></pre> <p>Output:</p> <p></p> <p>For more info check Examples</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#python-37-or-higher-is-required","title":"Python 3.7 or higher is required !","text":""},{"location":"installation/#linuxmacos","title":"Linux/macOS","text":"<pre><code>python3 -m pip install pycolorise\n</code></pre>"},{"location":"installation/#windows","title":"Windows","text":""},{"location":"installation/#method-1","title":"Method-1","text":"<pre><code>py -3 -m pip install pycolorise\n# or\npython -m pip install pycolorise\n</code></pre>"},{"location":"installation/#method-2","title":"Method-2","text":"<pre><code>pip install pycolorise\n</code></pre>"},{"location":"installation/#git","title":"GIT","text":"<p>Use GIT for installing Beta/ Latest versions</p> <pre><code>pip install -U git+https://github.com/Modern-Realm/pycolorise\n</code></pre>"},{"location":"about/CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"about/CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"about/CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"about/CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"about/CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"about/CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at skrphenix. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"about/CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"about/CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"about/CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"about/CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"about/CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"about/CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"about/CONTRIBUTING/","title":"Contributing","text":""},{"location":"about/CONTRIBUTING/#contributing-to-pycolorise","title":"Contributing to pycolorise","text":"<p>First off, thanks for taking the time to contribute. It makes the library substantially better. </p> <p>The following is a set of guidelines for contributing to the repository. These are guidelines, not hard rules.</p>"},{"location":"about/CONTRIBUTING/#good-bug-reports","title":"Good Bug Reports","text":""},{"location":"about/CONTRIBUTING/#please-be-aware-of-the-following-things-when-filing-bug-reports","title":"Please be aware of the following things when filing bug reports.","text":"<ol> <li>Don't open duplicate issues. Please search your issue to see if it has been asked already. Duplicate issues will be    closed.</li> <li>When filing a bug about exceptions or tracebacks, please include the complete traceback. Without the complete    traceback the issue might be unsolvable and you will be asked to provide more information.</li> <li>Make sure to provide enough information to make the issue workable. The issue template will generally walk you    through the process, but they are enumerated here as well:<ul> <li>A summary of your bug report. This is generally a quick sentence or two to describe the issue in human terms.</li> <li>Guidance on how to reproduce the issue. Ideally, this should have a small code sample that allows us to run   and see the issue for ourselves to debug. Please make sure that the token is not displayed. If you cannot   provide a code snippet, then let us know what the steps were, how often it happens, etc.</li> <li>Tell us what you expected to happen. That way we can meet that expectation.</li> <li>Tell us what actually happens. What ends up happening in reality? It's not helpful to say \"it fails\" or \"it   doesn't work\". Say how it failed, do you get an exception? Does it hang? How are the expectations different from   reality?</li> <li>Tell us information about your environment. What version of pycord-btns-menus are you using? How was it   installed? What operating system are you running on? These are valuable questions and information that we use.</li> </ul> </li> </ol> <p>If the bug report is missing this information then it'll take us longer to fix the issue. We will probably ask for clarification, and barring that if no response was given then the issue will be closed.</p> <p>Please try your best not to ask questions in our issue tracker. Most of them don't belong there unless they provide value to a larger audience.</p>"},{"location":"about/CONTRIBUTING/#submitting-a-pull-request","title":"Submitting a Pull Request","text":"<p>Submitting a pull request is fairly simple, just make sure it focuses on a single aspect and doesn't manage to have scope creep, and it's probably good to go. It would be incredibly lovely if the style is consistent to that found in the project. This project follows PEP-8 guidelines (mostly) with a column limit of 125.</p>"},{"location":"about/CONTRIBUTING/#licensing","title":"Licensing","text":"<p>By submitting a pull request, you agree that:</p> <ol> <li>You hold the copyright on all submitted code inside said pull request;</li> <li>You agree to transfer all rights to the owner of this repository, and; 3) If you are found to be in fault with any of    the above, we shall not be held responsible in any way after the pull request has been merged.</li> </ol>"},{"location":"about/CONTRIBUTING/#contact-us","title":"Contact Us","text":"<p>You can get support/help/guidance from below social-media links</p> <ul> <li>Home Page</li> <li>Official Discord Server</li> </ul>"},{"location":"about/CONTRIBUTING/#direct-links-for-contributors","title":"Direct Links for Contributors","text":"<ul> <li>Open Issue</li> <li>Pull Requests</li> </ul>"},{"location":"about/LICENSE/","title":"MIT License","text":""},{"location":"about/LICENSE/#copyright-c-2023-skrphenix","title":"Copyright \u00a9 2023 skrphenix","text":"<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"extensions/constants/","title":"Constants","text":"<pre><code>start = \"\\x1b[\"\nend = reset = \"\\x1b[0m\"\n</code></pre>"},{"location":"extensions/constants/#foreground-colors","title":"Foreground Colors","text":"<ul> <li>black</li> <li> <p>dark_grey</p> </li> <li> <p>red</p> </li> <li> <p>bright_red</p> </li> <li> <p>green</p> </li> <li> <p>bright_green</p> </li> <li> <p>orange</p> </li> <li> <p>yellow</p> </li> <li> <p>blue</p> </li> <li> <p>bright_blue</p> </li> <li> <p>purple</p> </li> <li> <p>pink</p> </li> <li> <p>cyan</p> </li> <li> <p>bright_cyan</p> </li> <li> <p>grey</p> </li> <li>white</li> </ul>"},{"location":"extensions/constants/#background-colors","title":"BackGround Colors","text":"<ul> <li>bg_black</li> <li> <p>bg_dark_grey</p> </li> <li> <p>bg_red</p> </li> <li> <p>bg_bright_red</p> </li> <li> <p>bg_green</p> </li> <li> <p>bg_bright_green</p> </li> <li> <p>bg_orange</p> </li> <li> <p>bg_yellow</p> </li> <li> <p>bg_blue</p> </li> <li> <p>bg_bright_blue</p> </li> <li> <p>bg_purple</p> </li> <li> <p>bg_pink</p> </li> <li> <p>bg_cyan</p> </li> <li> <p>bg_bright_cyan</p> </li> <li> <p>bg_grey</p> </li> <li>bg_white</li> </ul>"},{"location":"extensions/constants/#font-styles","title":"Font Styles","text":"<ul> <li>default</li> <li>bold</li> <li>dim</li> <li>italic</li> <li>underline</li> <li>blink</li> <li>rapid_blink</li> <li>inverse</li> <li>hidden</li> <li>strike_through</li> <li>framed</li> <li>encircled</li> <li>overlined</li> </ul>"},{"location":"extensions/constants/#rgb-colors-support","title":"RGB colors support","text":""},{"location":"extensions/constants/#pycolorise.constants.hexBgColor","title":"hexBgColor","text":"<pre><code>hexBgColor(color)\n</code></pre> <p>hex color code decorator</p> <p>Parameters:</p> Name Type Description Default <code>color</code> <code>str | int</code> <p>hex color code</p> required <p>Returns:</p> Name Type Description <code>color</code> <code>str</code> <p>colored string</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the hex color code is invalid</p>"},{"location":"extensions/constants/#pycolorise.constants.hexColor","title":"hexColor","text":"<pre><code>hexColor(color)\n</code></pre> <p>hex color code decorator</p> <p>Parameters:</p> Name Type Description Default <code>color</code> <code>str | int</code> <p>hex color code</p> required <p>Returns:</p> Name Type Description <code>color</code> <code>str</code> <p>colored string</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the hex color code is invalid</p>"},{"location":"extensions/constants/#pycolorise.constants.rgbBgColor","title":"rgbBgColor","text":"<pre><code>rgbBgColor(_red, _green, _blue)\n</code></pre> <p>RGB background color decorator</p> <p>Parameters:</p> Name Type Description Default <code>_red</code> <code>int</code> <p>ranges from 0 to 255</p> required <code>_green</code> <code>int</code> <p>ranges from 0 to 255</p> required <code>_blue</code> <code>int</code> <p>ranges from 0 to 255</p> required <p>Returns:</p> Name Type Description <code>color</code> <code>str</code> <p>colored string</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the rgb color code is invalid</p>"},{"location":"extensions/constants/#pycolorise.constants.rgbColor","title":"rgbColor","text":"<pre><code>rgbColor(_red, _green, _blue)\n</code></pre> <p>RGB color decorator</p> <p>Parameters:</p> Name Type Description Default <code>_red</code> <code>int</code> <p>ranges from 0 to 255</p> required <code>_green</code> <code>int</code> <p>ranges from 0 to 255</p> required <code>_blue</code> <code>int</code> <p>ranges from 0 to 255</p> required <p>Returns:</p> Name Type Description <code>color</code> <code>str</code> <p>colored string</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the rgb color code is invalid</p>"},{"location":"extensions/examples/","title":"Example usage of constants","text":"<pre><code>from pycolorise.constants import *\nprint(red + \"red\", blue + bold + \"blue\" + end)\nprint(bright_red + \"red\" + black + bg_cyan + \"cyan\" + end)\n# rgb colors\nprint(rgbColor(1, 255, 1) + \"green\", end)\nprint(rgbBgColor(1, 255, 1) + \"bg_green\" + end)\n# hex colors\nprint(hexColor(\"#ffa500\") + \"orange\" + end)\nprint(hexBgColor(0xff4fff) + \"pink\" + end)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"guide/base/","title":"Base","text":""},{"location":"guide/base/#pycolorise.base.Color","title":"Color","text":"<pre><code>Color(content, fg=None, bg=None, style=None)\n</code></pre> <p>Color decorator</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>fg</code> <code>ColorTypes</code> <p>font color (or) foreground color</p> <code>None</code> <code>bg</code> <code>BgColorTypes</code> <p>background color</p> <code>None</code> <code>style</code> <code>FontTypes</code> <p>font style</p> <code>None</code>"},{"location":"guide/base/#pycolorise.base.Color.properties","title":"properties  <code>property</code>","text":"<pre><code>properties: Tuple[ColorTypes, BgColorTypes, FontTypes]\n</code></pre> <p>Properties of the string/font</p> <p>Returns:</p> Type Description <code>Tuple[ColorTypes, BgColorTypes, FontTypes]</code> <p>foreground, background color and font style</p>"},{"location":"guide/base/#pycolorise.base.Color.value","title":"value  <code>property</code>","text":"<pre><code>value: ColorString\n</code></pre> <p>Returns:</p> Type Description <code>ColorString</code> <p>colored string</p>"},{"location":"guide/base/#pycolorise.base.Color.__add__","title":"__add__","text":"<pre><code>__add__(color)\n</code></pre> <p>Concatenates two colors</p> <p>Parameters:</p> Name Type Description Default <code>color</code> <code>Any</code> <p>color decorator or string</p> required <p>Returns:</p> Type Description <code>ColorString</code> <p>colored string</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the color is not <code>Color</code> type and not string</p>"},{"location":"guide/base/#pycolorise.base.Color.__eq__","title":"__eq__","text":"<pre><code>__eq__(color)\n</code></pre> <p>Compares the two Colors properties and values</p> <p>Parameters:</p> Name Type Description Default <code>color</code> <code>Any</code> <p>color decorator or normal string</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the properties &amp; values are same else <code>False</code></p> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the color is not <code>Color</code> type</p>"},{"location":"guide/base/#pycolorise.base.Color.__len__","title":"__len__","text":"<pre><code>__len__()\n</code></pre> <p>Returns:</p> Name Type Description <code>length</code> <code>int</code> <p>length of the string</p>"},{"location":"guide/base/#pycolorise.base.Color.__str__","title":"__str__","text":"<pre><code>__str__()\n</code></pre> <p>Returns:</p> Type Description <code>ColorString</code> <p>colored string</p>"},{"location":"guide/base/#pycolorise.base.Color.replace","title":"replace","text":"<pre><code>replace(\nvalue=MISSING, fg=MISSING, bg=MISSING, style=MISSING\n)\n</code></pre> <p>Replaces the properties</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>string to be colored</p> <code>MISSING</code> <code>fg</code> <code>ColorTypes</code> <p>font color (or) foreground color</p> <code>MISSING</code> <code>bg</code> <code>BgColorTypes</code> <p>background color</p> <code>MISSING</code> <code>style</code> <code>FontTypes</code> <p>font style</p> <code>MISSING</code>"},{"location":"guide/base/#pycolorise.base.RGB","title":"RGB","text":"<pre><code>RGB(red, green, blue)\n</code></pre> <p>RGB color decorator</p> <p>Parameters:</p> Name Type Description Default <code>red</code> <code>int</code> <p>ranges from 0 to 255</p> required <code>green</code> <code>int</code> <p>ranges from 0 to 255</p> required <code>blue</code> <code>int</code> <p>ranges from 0 to 255</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if the rgb color code is invalid</p>"},{"location":"guide/base/#pycolorise.base.RGB.hex_code","title":"hex_code  <code>property</code>","text":"<pre><code>hex_code: str\n</code></pre> <p>Returns:</p> Name Type Description <code>code</code> <code>str</code> <p>hex color code</p>"},{"location":"guide/base/#pycolorise.base.RGB.value","title":"value  <code>property</code>","text":"<pre><code>value: Tuple[int, int, int]\n</code></pre> <p>Returns:</p> Name Type Description <code>code</code> <code>Tuple[int, int, int]</code> <p>rgb color code</p>"},{"location":"guide/base/#pycolorise.base.RGB.from_hex","title":"from_hex  <code>classmethod</code>","text":"<pre><code>from_hex(color)\n</code></pre> <p>Converts hex color code to rgb color code</p> <p>Parameters:</p> Name Type Description Default <code>color</code> <code>Union[str, int]</code> <p>hex color code</p> required <p>Returns:</p> Type Description <code>RGB</code> <p>RGB color decorator</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the hex color code is invalid</p> <p>Examples:</p> <pre><code># orange color\nRGB.from_hex(\"#ffa500\")\nRGB.from_hex(\"ffa500\")\nRGB.from_hex(0xffa500)\n</code></pre>"},{"location":"guide/base/#pycolorise.base.Template","title":"Template","text":"<pre><code>Template(fg=None, bg=None, style=None)\n</code></pre> <p>Color/Font template</p> <p>Parameters:</p> Name Type Description Default <code>fg</code> <code>ColorTypes</code> <p>font color (or) foreground color</p> <code>None</code> <code>bg</code> <code>BgColorTypes</code> <p>background color</p> <code>None</code> <code>style</code> <code>FontTypes</code> <p>font style</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>if no argument is passed</p> <p>Examples:</p> <pre><code>T1 = Template(fg=Colors.red, style=FontStyles.bold)\nprint(T1(\"hello\"), T1(\"world\"))\n</code></pre>"},{"location":"guide/base/#pycolorise.base.Template.__call__","title":"__call__","text":"<pre><code>__call__(content)\n</code></pre> <p>color decorator</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <p>Returns:</p> Type Description <code>Color</code> <p>color decorator</p>"},{"location":"guide/base/#pycolorise.base.Template.__eq__","title":"__eq__","text":"<pre><code>__eq__(template)\n</code></pre> <p>compares the two templates</p> <p>:param template:</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the properties are same else <code>False</code></p> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the color is not <code>Template</code> type</p>"},{"location":"guide/base/#pycolorise.base.Template.edit","title":"edit","text":"<pre><code>edit(fg=MISSING, bg=MISSING, style=MISSING)\n</code></pre> <p>Edits the template properties</p> <p>Parameters:</p> Name Type Description Default <code>fg</code> <code>ColorTypes</code> <p>font color (or) foreground color</p> <code>MISSING</code> <code>bg</code> <code>BgColorTypes</code> <p>background color</p> <code>MISSING</code> <code>style</code> <code>FontTypes</code> <p>font style</p> <code>MISSING</code>"},{"location":"guide/bg_colors/","title":"Background Colors","text":""},{"location":"guide/bg_colors/#normal-colors","title":"Normal Colors","text":""},{"location":"guide/bg_colors/#pycolorise.bgColors.normal_colors.BgBlack","title":"BgBlack","text":"<pre><code>BgBlack(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string's background to Black color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/bg_colors/#pycolorise.bgColors.normal_colors.BgBlue","title":"BgBlue","text":"<pre><code>BgBlue(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string's background to Blue color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/bg_colors/#pycolorise.bgColors.normal_colors.BgCyan","title":"BgCyan","text":"<pre><code>BgCyan(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string's background to Cyan color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/bg_colors/#pycolorise.bgColors.normal_colors.BgGreen","title":"BgGreen","text":"<pre><code>BgGreen(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string's background to Green color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/bg_colors/#pycolorise.bgColors.normal_colors.BgGrey","title":"BgGrey","text":"<pre><code>BgGrey(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string's background to Grey color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/bg_colors/#pycolorise.bgColors.normal_colors.BgPink","title":"BgPink","text":"<pre><code>BgPink(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string's background to Pink color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/bg_colors/#pycolorise.bgColors.normal_colors.BgPurple","title":"BgPurple","text":"<pre><code>BgPurple(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string's background to Purple color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/bg_colors/#pycolorise.bgColors.normal_colors.BgRed","title":"BgRed","text":"<pre><code>BgRed(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string's background to Red color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/bg_colors/#pycolorise.bgColors.normal_colors.BgWhite","title":"BgWhite","text":"<pre><code>BgWhite(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string's background to White color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/bg_colors/#pycolorise.bgColors.normal_colors.BgYellow","title":"BgYellow","text":"<pre><code>BgYellow(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string's background to Yellow color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/bg_colors/#bright-colors","title":"Bright Colors","text":""},{"location":"guide/bg_colors/#pycolorise.bgColors.bright_colors.BgBrightBlue","title":"BgBrightBlue","text":"<pre><code>BgBrightBlue(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string's background to Bright Blue color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/bg_colors/#pycolorise.bgColors.bright_colors.BgBrightCyan","title":"BgBrightCyan","text":"<pre><code>BgBrightCyan(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string's background to Bright Cyan color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/bg_colors/#pycolorise.bgColors.bright_colors.BgBrightGreen","title":"BgBrightGreen","text":"<pre><code>BgBrightGreen(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string's background to Bright Green color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/bg_colors/#pycolorise.bgColors.bright_colors.BgBrightRed","title":"BgBrightRed","text":"<pre><code>BgBrightRed(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string's background to Bright Red color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/bg_colors/#pycolorise.bgColors.bright_colors.BgBrightYellow","title":"BgBrightYellow","text":"<pre><code>BgBrightYellow(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string's background to Yellow color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/bg_colors/#pycolorise.bgColors.bright_colors.BgDarkGrey","title":"BgDarkGrey","text":"<pre><code>BgDarkGrey(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string's background to DarkGrey color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/colors/","title":"Foreground Colors","text":""},{"location":"guide/colors/#normal-colors","title":"Normal Colors","text":""},{"location":"guide/colors/#pycolorise.colors.normal_colors.Black","title":"Black","text":"<pre><code>Black(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string to Black color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/colors/#pycolorise.colors.normal_colors.Blue","title":"Blue","text":"<pre><code>Blue(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string to Blue color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/colors/#pycolorise.colors.normal_colors.Cyan","title":"Cyan","text":"<pre><code>Cyan(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string to Cyan color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/colors/#pycolorise.colors.normal_colors.Green","title":"Green","text":"<pre><code>Green(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string to Green color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/colors/#pycolorise.colors.normal_colors.Grey","title":"Grey","text":"<pre><code>Grey(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string to Grey color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/colors/#pycolorise.colors.normal_colors.Pink","title":"Pink","text":"<pre><code>Pink(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string to Pink color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/colors/#pycolorise.colors.normal_colors.Purple","title":"Purple","text":"<pre><code>Purple(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string to Purple color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/colors/#pycolorise.colors.normal_colors.Red","title":"Red","text":"<pre><code>Red(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string to Red color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/colors/#pycolorise.colors.normal_colors.White","title":"White","text":"<pre><code>White(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string to White color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/colors/#pycolorise.colors.normal_colors.Yellow","title":"Yellow","text":"<pre><code>Yellow(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string to Yellow color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/colors/#bright-colors","title":"Bright Colors","text":""},{"location":"guide/colors/#pycolorise.colors.bright_colors.BrightBlue","title":"BrightBlue","text":"<pre><code>BrightBlue(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string to Bright Blue color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/colors/#pycolorise.colors.bright_colors.BrightCyan","title":"BrightCyan","text":"<pre><code>BrightCyan(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string to Bright Cyan color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/colors/#pycolorise.colors.bright_colors.BrightGreen","title":"BrightGreen","text":"<pre><code>BrightGreen(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string to Bright Green color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/colors/#pycolorise.colors.bright_colors.BrightRed","title":"BrightRed","text":"<pre><code>BrightRed(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string to Bright Red color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/colors/#pycolorise.colors.bright_colors.BrightYellow","title":"BrightYellow","text":"<pre><code>BrightYellow(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string to Yellow color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/colors/#pycolorise.colors.bright_colors.DarkGrey","title":"DarkGrey","text":"<pre><code>DarkGrey(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Converts string to DarkGrey color</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/enums/","title":"Enums","text":""},{"location":"guide/enums/#pycolorise.enums.BaseEnum","title":"BaseEnum","text":"<p>         Bases: <code>Enum</code></p> <p>Base enum for Colors, BgColors and FontStyles</p>"},{"location":"guide/enums/#pycolorise.enums.BaseEnum.items","title":"items  <code>property</code>","text":"<pre><code>items: Tuple[str, int]\n</code></pre> <p>Returns:</p> Type Description <code>Tuple[str, int]</code> <p>color name and code</p>"},{"location":"guide/enums/#pycolorise.enums.BaseEnum.__str__","title":"__str__","text":"<pre><code>__str__()\n</code></pre> <p>Returns:</p> Name Type Description <code>code</code> <code>str</code> <p>color code</p>"},{"location":"guide/enums/#pycolorise.enums.BgColors","title":"BgColors","text":"<p>         Bases: <code>BaseEnum</code></p> <p>Background colors</p> Properties <ul> <li>black</li> <li>dark_grey</li> <li>red</li> <li>bright_red</li> <li>green</li> <li>bright_green</li> <li>orange</li> <li>yellow</li> <li>blue</li> <li>bright_blue</li> <li>purple</li> <li>pink</li> <li>cyan</li> <li>bright_cyan</li> <li>grey</li> <li>white</li> </ul>"},{"location":"guide/enums/#pycolorise.enums.Colors","title":"Colors","text":"<p>         Bases: <code>BaseEnum</code></p> <p>Foreground colors or font colors</p> Properties <ul> <li>black</li> <li>dark_grey</li> <li>red</li> <li>bright_red</li> <li>green</li> <li>bright_green</li> <li>orange</li> <li>yellow</li> <li>blue</li> <li>bright_blue</li> <li>purple</li> <li>pink</li> <li>cyan</li> <li>bright_cyan</li> <li>grey</li> <li>white</li> </ul>"},{"location":"guide/enums/#pycolorise.enums.FontStyles","title":"FontStyles","text":"<p>         Bases: <code>BaseEnum</code></p> <p>Font styles</p> Properties <ul> <li>default</li> <li>bold</li> <li>dim</li> <li>italic</li> <li>underline</li> <li>blink</li> <li>rapid_blink</li> <li>inverse</li> <li>hidden</li> <li>strike_through</li> <li>framed</li> <li>encircled</li> <li>overlined</li> </ul>"},{"location":"guide/examples/","title":"Examples","text":"<pre><code>from pycolorise.colors import *\nfrom pycolorise.bgColors import *\nfrom pycolorise.styles import *\nprint(\"\u2022 Foreground colors\")\nprint(\nRed(\"red\"), BrightRed(\"bred\"),\nGreen(\"green\"), BrightGreen(\"bgreen\"),\nBlue(\"blue\"), BrightBlue(\"bblue\"),\nCyan(\"cyan\"), BrightCyan(\"bcyan\")\n)\nprint(\nYellow(\"yellow\"), BrightYellow(\"byellow\"),\nDarkGrey(\"bgrey\"), Grey(\"grey\"),\nBlack(\"black\"), White(\"white\"),\nPurple(\"purple\"), Pink(\"pink\"),\n)\nprint(\"\\n\u2022 Background colors\")\nprint(\nBgRed(\"red\"), BgBrightRed(\"bred\"),\nBgGreen(\"green\"), BgBrightGreen(\"bgreen\"),\nBgBlue(\"blue\"), BgBrightBlue(\"bblue\"),\nBgCyan(\"cyan\"), BgBrightCyan(\"bcyan\")\n)\nprint(\nBgYellow(\"yellow\"), BgBrightYellow(\"byellow\"),\nBgDarkGrey(\"bgrey\"), BgGrey(\"grey\"),\nBgBlack(\"black\"), BgWhite(\"white\"),\nBgPurple(\"purple\"), BgPink(\"pink\"),\n)\nprint(\"\\n\u2022 Font styles\")\nprint(\nDefault(\"default\"), Bold(\"bold\"),\nDim(\"dim\"), Italic(\"italic\"),\nUnderline(\"underline\"), Blink(\"blink\"),\nRapidBlink(\"rapid_blink\")\n)\nprint(\nStrikeThrough(\"strike through\"),\nFramed(\"framed\"), Inverse(\"inverse\"),\nEncircled(\"encircled\"), Hidden(\"hidden\"),\nOverLined(\"over lined\")\n)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"guide/font_styles/","title":"Font Styles","text":""},{"location":"guide/font_styles/#pycolorise.styles.Blink","title":"Blink","text":"<pre><code>Blink(content, **kwargs)\n</code></pre> <p>         Bases: <code>Style</code></p> <p>Converts string to Blink font</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be styled</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/font_styles/#pycolorise.styles.Bold","title":"Bold","text":"<pre><code>Bold(content, **kwargs)\n</code></pre> <p>         Bases: <code>Style</code></p> <p>Converts string to Bold font</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be styled</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/font_styles/#pycolorise.styles.Default","title":"Default","text":"<pre><code>Default(content, **kwargs)\n</code></pre> <p>         Bases: <code>Style</code></p> <p>Converts string to Default font</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be styled</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/font_styles/#pycolorise.styles.Dim","title":"Dim","text":"<pre><code>Dim(content, **kwargs)\n</code></pre> <p>         Bases: <code>Style</code></p> <p>Converts string to Dim font</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be styled</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/font_styles/#pycolorise.styles.Encircled","title":"Encircled","text":"<pre><code>Encircled(content, **kwargs)\n</code></pre> <p>         Bases: <code>Style</code></p> <p>Converts string to Encircled font</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be styled</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/font_styles/#pycolorise.styles.Framed","title":"Framed","text":"<pre><code>Framed(content, **kwargs)\n</code></pre> <p>         Bases: <code>Style</code></p> <p>Converts string to Framed font</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be styled</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/font_styles/#pycolorise.styles.Hidden","title":"Hidden","text":"<pre><code>Hidden(content, **kwargs)\n</code></pre> <p>         Bases: <code>Style</code></p> <p>Converts string to Hidden font, may not work in all terminals</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be styled</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/font_styles/#pycolorise.styles.Inverse","title":"Inverse","text":"<pre><code>Inverse(content, **kwargs)\n</code></pre> <p>         Bases: <code>Style</code></p> <p>Converts string to Inverse font</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be styled</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/font_styles/#pycolorise.styles.Italic","title":"Italic","text":"<pre><code>Italic(content, **kwargs)\n</code></pre> <p>         Bases: <code>Style</code></p> <p>Converts string to Italic font</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be styled</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/font_styles/#pycolorise.styles.OverLined","title":"OverLined","text":"<pre><code>OverLined(content, **kwargs)\n</code></pre> <p>         Bases: <code>Style</code></p> <p>Converts string to Over Lined font, may not work in all terminals</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be styled</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/font_styles/#pycolorise.styles.RapidBlink","title":"RapidBlink","text":"<pre><code>RapidBlink(content, **kwargs)\n</code></pre> <p>         Bases: <code>Style</code></p> <p>Converts string to Rapid Blink font</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be styled</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/font_styles/#pycolorise.styles.StrikeThrough","title":"StrikeThrough","text":"<pre><code>StrikeThrough(content, **kwargs)\n</code></pre> <p>         Bases: <code>Style</code></p> <p>Converts string to Strike Through font</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be styled</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/font_styles/#pycolorise.styles.Style","title":"Style","text":"<pre><code>Style(content, **kwargs)\n</code></pre> <p>         Bases: <code>Color</code></p> <p>Base Style decorator</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be colored</p> required <code>kwargs</code> <code>Any</code> <p>arguments same as in <code>Color</code></p> <code>{}</code>"},{"location":"guide/font_styles/#pycolorise.styles.Underline","title":"Underline","text":"<pre><code>Underline(content, **kwargs)\n</code></pre> <p>         Bases: <code>Style</code></p> <p>Converts string to Underline font</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>Any</code> <p>string to be styled</p> required <code>kwargs</code> <code>Any</code> <p>same as arguments in <code>Color</code></p> <code>{}</code>"},{"location":"guide/logging/","title":"Customise logger with colors","text":"<pre><code>import logging\nfrom pycolorise.colors import *\nfrom pycolorise import Color, RGB\nfrom pycolorise.enums import FontStyles\nasctime = Color(\"%(asctime)s\", fg=RGB(0, 128, 128))  # Teal color\nname = Blue(\"%(name)s\")\nlevel = Red(\"%(levelname)s\", style=FontStyles.bold)\nmsg = Purple(\"%(message)s\", style=FontStyles.italic)\nlogging.basicConfig(\nformat=f\"{asctime} - {name} - {level} - {msg}\",\nlevel=logging.INFO\n)\nlogger = logging.getLogger(__name__)\nlogger.debug(\"Debug message\")\nlogger.info(\"Info message\")\nlogger.warning(\"Warning message\")\nlogger.error(\"Error message\")\nlogger.critical(\"Critical message\")\n</code></pre> <p>Output:</p> <p></p>"},{"location":"guide/templates/","title":"Examples for Template","text":"<pre><code>from pycolorise import Template, RGB\nfrom pycolorise.enums import FontStyles\nf1 = Template(\nfg=RGB.from_hex(\"#9a6324\"),  # brown color\nstyle=FontStyles.bold\n)\nf2 = Template(\nfg=RGB(0, 128, 128),  # Teal color\nstyle=(FontStyles.bold, FontStyles.italic)\n)\nprint(f1(\"hello\") + f1(\"world\"))\nprint(f1(\"this\"), f2(\"is\"), f1(\"the\"), f1(\"example\"), f2(\"for\"), f1(\"using\"), f2(\"template\"))\n</code></pre> <p>Output:</p> <p></p>"}]}